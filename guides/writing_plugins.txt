
Redcar: Writing Plugins
=======================
Dan Lucraft <dan@fluentradical.com>

Redcar is a text editor written in JRuby. It's designed to be
particularly easy to extend in Ruby. This article explains some of the 
interfaces you can implement to create Redcar plugins

Introduction
------------

Redcar plugins contain the following components:

- Commands - these appear in menus and have keybindings,
- DocumentMirrors - these let you display some kind of data in tabs for the 
  user to edit, for instance text files,
- TreeMirrors - these let you display data as trees and respond to user actions
  in the treeview, for instance the directory view.

Plugin Organization
-------------------

Look in redcar/plugins/ for examples of how plugins are organized. The minimum 
directory structure should look like this:

  myplugin/
    plugin.yaml
    lib/
      myplugin/
        code...
      myplugin.rb

plugin.yaml is the manifest file that tells Redcar how to load your plugin. You 
can copy and paste this one and fill in the blanks:

	--- !ruby/object:FreeBASE::PluginConfiguration
	name: myplugin
	description: Description of your plugin 
	version: 1.0
	author: Your Name
	autoload: true
	startup_module: MyPlugin
	load_dependencies: 
	  redcar: "*"
	start_dependencies: 
	  redcar: "*"

The first few of these are self-explanatory. `autoload` can be set to `false` and 
your plugin will not be loaded. 

The name should be a gem-style name ("wiki", "maximum_macros") as Redcar will use 
the name to add `myplugin/lib/` to the Ruby load path and then require the file 
`myplugin`. 

It will expect that file to define the class or module `MyPlugin` as specified in 
`startup_module`. (You will see later that that module can define method hooks to 
run on load or startup.)

The two properties `load_dependencies` and `start_dependencies` specify which 
plugins must be loaded or started before your plugin is loaded or started.  
`redcar` is a good default for both of these, as it says the plugin depends upon 
all the standard Redcar plugins.

Other than what's already stated, there are no special code loading requirements 
as in Rails. Your code will need to require all Ruby files it needs explicitly.

Commands
--------

In Redcar commands are subclasses of `Redcar::Command`. 

Here's one that strips all whitespace from the ends of lines in the current 
buffer:

   class StripWhitespaceCommand < Redcar::EditTabCommand
   
     def execute
       0.upto(doc.line_count - 1) do |line_ix|
         doc.replace_line(line_ix) {|line| line.strip }
       end
     end
   end
    
This makes use of methods on the Document class to manipulate the text in the edit 
tab.


DocumentMirrors
---------------

The EditView displays the contents of the Document, which is the in-memory 
representation of the text in your tab. You can use the API of the Document to 
manipulate the in


